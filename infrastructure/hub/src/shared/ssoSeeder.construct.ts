
import { Construct } from 'constructs';
import { NodejsFunction, OutputFormat } from 'aws-cdk-lib/aws-lambda-nodejs';
import path from 'path';
import { Runtime, Tracing } from 'aws-cdk-lib/aws-lambda';
import { RetentionDays } from 'aws-cdk-lib/aws-logs';
import { Duration } from 'aws-cdk-lib';
import { fileURLToPath } from 'url';
import * as cr from 'aws-cdk-lib/custom-resources';
import * as cdk from 'aws-cdk-lib';
import { NagSuppressions } from 'cdk-nag';
import { getLambdaArchitecture } from '@sdf/cdk-common';
import { Effect, Policy, PolicyStatement } from 'aws-cdk-lib/aws-iam';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export interface SsoSeederConstructProperties {
	environment: string;
	ssoRegion: string;
	ssoInstanceArn:string;
	adminEmail: string;
}




export class SsoSeeder extends Construct {


	constructor(scope: Construct, id: string, props: SsoSeederConstructProperties) {
		super(scope, id);

		const accountId = cdk.Stack.of(this).account;
		const namePrefix = `sdf-${props.environment}`;
		const instanceId = props.ssoInstanceArn.split('/')[1];

		const iamPolicy = new Policy(this, 'iam-policy', {
			statements: [
				new PolicyStatement({
					sid: 'sso',
					effect: Effect.ALLOW,
					actions: ['sso:DescribeInstance'],
					resources: [
						`arn:aws:sso:::instance/${instanceId}`,
					]
				}),
				new PolicyStatement({
					sid: 'identityStore',
					effect: Effect.ALLOW,
					actions: [
						'identitystore:CreateGroup',
						'identitystore:GetGroupId',
						'identitystore:CreateUser',
						'identitystore:GetUserId',
						'identitystore:CreateGroupMembership',
				],
					resources: [
						`arn:aws:identitystore::${accountId}:identitystore/*`,
						`arn:aws:identitystore:::user/*`,
						`arn:aws:identitystore:::group/*`
					]
				}),
			]
		});

		NagSuppressions.addResourceSuppressions(iamPolicy, [
			{
				id: 'AwsSolutions-IAM5',
				reason: 'This policy only allow the lambda to create an SSO application creation role.'
			}
		]);

		// Below section is a custom resource that creates a cognito application in SSO
		const customResourceLambda = new NodejsFunction(this, 'SSOSeederLambda', {
			functionName: `${namePrefix}-sso-seeder`,
			description: `SSO seeder`,
			entry: path.join(__dirname, './customResources/iamControlCenter.customResource.ts'),
			runtime: Runtime.NODEJS_18_X,
			tracing: Tracing.ACTIVE,
			memorySize: 512,
			logRetention: RetentionDays.ONE_WEEK,
			timeout: Duration.minutes(5),
			bundling: {
				minify: true,
				format: OutputFormat.ESM,
				target: 'node18.16',
				sourceMap: false,
				sourcesContent: false,
				banner: 'import { createRequire } from \'module\';const require = createRequire(import.meta.url);import { fileURLToPath } from \'url\';import { dirname } from \'path\';const __filename = fileURLToPath(import.meta.url);const __dirname = dirname(__filename);',
				externalModules: ['aws-sdk', 'pg-native']
			},
			environment: {
				SSO_INSTANCE_ARN: props.ssoInstanceArn,
				SSO_REGION:props.ssoRegion,
				SDF_ENVIRONMENT: props.environment,
				ADMIN_EMAIL: props.adminEmail
			},
			depsLockFilePath: path.join(__dirname, '../../../../common/config/rush/pnpm-lock.yaml'),
			architecture: getLambdaArchitecture(scope),
		});

		customResourceLambda.role?.attachInlinePolicy(
			iamPolicy
		);

		const customResourceProvider = new cr.Provider(this, 'CustomResourceProvider', {
			onEventHandler: customResourceLambda
		});

		new cdk.CustomResource(this, 'CustomResourceSsoSeeder', {
			serviceToken: customResourceProvider.serviceToken,
			properties: {
				uniqueToken: Date.now()
			}
		});

		NagSuppressions.addResourceSuppressions(customResourceProvider, [
			{
				id: 'AwsSolutions-IAM4',
				reason: 'This only contains the policy the create and insert log to log group.',
				appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
			},
			{
				id: 'AwsSolutions-IAM5',
				reason: 'This only applies to the seeder lambda defined in this construct and its versions.',
				appliesTo: ['Resource::<SsoSeederSSOSeederLambdaA03FB38F.Arn>:*']
			}
		], true);
		// 	End of legacy code

		NagSuppressions.addResourceSuppressions([customResourceLambda], [
			{
				id: 'AwsSolutions-IAM4',
				reason: 'This only contains the policy the create and insert log to log group.',
				appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
			},
			
			{
				id: 'AwsSolutions-IAM5',
				appliesTo: ['Resource::*'],
				reason: 'The resource condition in the IAM policy is generated by CDK, this only applies to xray:PutTelemetryRecords and xray:PutTraceSegments.'
			}
		], true);

	}
}
