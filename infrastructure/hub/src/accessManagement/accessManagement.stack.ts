import { Stack, StackProps } from "aws-cdk-lib";
import type { Construct } from "constructs";
import { CredentialVendor } from "./credentialVendor/credentialVendor.construct.js";
import { AccessGrantor } from "./accessGrantor/accessGrantor.construct.js";
import * as ssm from "aws-cdk-lib/aws-ssm";
import { userPoolIdParameter } from "@df/cdk-common";
import { NagSuppressions } from 'cdk-nag';


interface AccessManagementStackProps extends StackProps {
    spokeAccountIds: string[];
    identityStoreId: string;
}

/**
 * Contains the infrastructure for the Access Management module for a hub account
 */
export class AccessManagementStack extends Stack {
	constructor(scope: Construct, id: string, props: AccessManagementStackProps) {
		super(scope, id, props);
        const cognitoUserPoolId = ssm.StringParameter.fromStringParameterAttributes(this, 'CognitoUserPoolId', {
			parameterName: userPoolIdParameter,
			simpleName: false
		}).stringValue;

        new AccessGrantor(this, "AccessGrantor", {
            spokeAccountIds: props.spokeAccountIds,
        });
        
        new CredentialVendor(this, "CredentialVendor", {
            cognitoUserPoolId,
            identityStoreId: props.identityStoreId
        });
		NagSuppressions.addResourceSuppressionsByPath(this, [
            '/AccessManagementStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource'
        ],
        [
            {
                id: 'AwsSolutions-IAM4',
                appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'],
                reason: 'This policy attached to the role is generated by CDK.'

            },
            {
                id: 'AwsSolutions-IAM5',
                appliesTo: ['Resource::*'],
                reason: 'The resource condition in the IAM policy is generated by CDK, this only applies to logs:DeleteRetentionPolicy and logs:PutRetentionPolicy actions.'

            }],
        true);
    }
}