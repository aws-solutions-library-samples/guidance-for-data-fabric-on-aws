import { Stack, StackProps } from 'aws-cdk-lib';
import type { Construct } from 'constructs';
import { StringParameter } from 'aws-cdk-lib/aws-ssm';
import { NagSuppressions } from 'cdk-nag';

import { DataAsset } from "./dataAsset.construct.js";
import { userPoolIdParameter} from "../shared/cognito.construct.js"

export type DataAssetStackProperties = StackProps & {
    domainId: string;
    moduleName:string;
    eventBusName: string;
};


export const dataAssetApiUrlParameter = (domain: string) => `/sdf/${domain}/dataAsset/apiUrl`;
export const dataAssetFunctionNameParameter = (domain: string) => `/sdf/${domain}/dataAsset/functionName`;
export const dataAssetTableNameParameter = (domain: string) => `/sdf/${domain}/dataAsset/tableName`;
export const dataAssetTableArnParameter = (domain: string) => `/sdf/${domain}/dataAsset/tableArn`;

export class DataAssetStack extends Stack {
    constructor(scope: Construct, id: string, props: DataAssetStackProperties) {
        super(scope, id, props);

        const userPoolId = StringParameter.valueForStringParameter(this, userPoolIdParameter(props.domainId));



        const dataAsset = new DataAsset(this, 'DataAsset', {
            domainId: props.domainId,
            moduleName: props.moduleName,
            eventBusName: props.eventBusName,
            cognitoUserPoolId: userPoolId
        });

        new StringParameter(this, 'dataAssetFunctionNameParameter', {
            parameterName: dataAssetFunctionNameParameter(props.domainId),
            stringValue: dataAsset.functionName
        });

        new StringParameter(this, 'dataAssetApiUrlParameter', {
            parameterName: dataAssetApiUrlParameter(props.domainId),
            stringValue: dataAsset.apiUrl
        });

        new StringParameter(this, 'dataAssetTableNameParameter', {
            parameterName: dataAssetTableNameParameter(props.domainId),
            stringValue: dataAsset.tableName
        });

        new StringParameter(this, 'dataAssetTableArnParameter', {
            parameterName: dataAssetTableArnParameter(props.domainId),
            stringValue: dataAsset.tableArn
        });


        NagSuppressions.addResourceSuppressionsByPath(this, [
                '/DataLineageStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/Resource'
            ],
            [
                {
                    id: 'AwsSolutions-IAM4',
                    reason: 'This only contains the policy the create and insert log to log group.',
                    appliesTo: ['Policy::arn:<AWS::Partition>:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole']
                }
            ],
            true);

        NagSuppressions.addResourceSuppressionsByPath(this, [
                '/DataLineageStack/LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8a/ServiceRole/DefaultPolicy/Resource'
            ],
            [
                {
                    id: 'AwsSolutions-IAM5',
                    appliesTo: ['Resource::*'],
                    reason: 'This policy attached to the role is generated by CDK.'
                }
            ],
            true);

    }


}
