import type { BaseLogger } from 'pino';
import type { DataAssetTask } from '../../models.js';
import { CreateDataQualityRulesetCommand, GlueClient, StartDataQualityRulesetEvaluationRunCommand, UpdateDataQualityRulesetCommand } from '@aws-sdk/client-glue';
import { ParameterType, PutParameterCommand, type SSMClient } from '@aws-sdk/client-ssm';

export class DataQualityProfileJobTask {

    constructor(private readonly log: BaseLogger,
                private readonly glueClient: GlueClient,
                private readonly GlueDbName: string,
                private readonly ssmClient: SSMClient) {
    }

    public async process(event: DataAssetTask): Promise<any> {
        this.log.info(`DataQualityProfileJobTask > process > in > event: ${JSON.stringify(event)}`);

        const asset = event.dataAsset;

        const id = (asset.catalog?.assetId) ? asset.catalog.assetId : asset.requestId

        const jobName = `${asset.workflow.name}-${id}-dataQualityProfile`;

        const qualityRulesetCommandPayload = {
            Name: jobName,
            Ruleset: event.dataAsset.workflow.dataQuality.ruleset,
            Description: 'Data quality ruleset generated by Data Fabric.',
        }

        try {
            await this.glueClient.send(new CreateDataQualityRulesetCommand({
                ...qualityRulesetCommandPayload,
                Tags: {
                    requestId: event.dataAsset.requestId,
                }
            }))
        } catch (e) {
            if (e.name === 'InvalidInputException' && e.message.includes('A resource with the same resourceName but a different internalId already exists')) {
                this.log.debug(`DataQualityProfileJobTask > process > ${e.message}`);
                await this.glueClient.send(new UpdateDataQualityRulesetCommand(qualityRulesetCommandPayload))
            } else {
                this.log.error(`DataQualityProfileJobTask > process > error: ${JSON.stringify(e)}`);
                throw e;
            }
        }

        await this.glueClient.send(new StartDataQualityRulesetEvaluationRunCommand({
            RulesetNames: [jobName],
            DataSource: {
                GlueTable: {
                    TableName: event.dataAsset.execution.glueTableName,
                    DatabaseName: this.GlueDbName,
                }
            },
            Role: asset.workflow.roleArn
        }))

        // We store the task token in SSM parameter using the requestId for future retrieval
        this.ssmClient.send(new PutParameterCommand({
            Name: `/df/spoke/dataAsset/stateMachineExecution/create/${event.dataAsset.requestId}`,
            Value: JSON.stringify(event),
            Type: ParameterType.STRING,
            Overwrite: true
        }));

        this.log.info(`DataQualityProfileJobTask > process > exit:`);
    }
}
